# Cria dois conjuntos de dados sobre imóveis: com e sem geocode

print("Tratando dados dos imóveis...")

library(dplyr)
library(raster)
library(magrittr)
library(sp)
source("manipulacao/library.R")
source("config.R")

vinculos <- readRDS("coleta/dados/pessoas_vinculo.RDS")
pessoas <- readRDS("manipulacao/dados/pessoas.RDS")
pessoas_fisica <- readRDS("manipulacao/dados/pessoas_fisica.RDS")
imoveis <- readRDS("coleta/dados/imoveis.RDS")
imoveis_geo_osm <- readRDS("coleta/dados/imoveis_geo_osm.RDS")
imoveis_geo_interno <- readRDS("coleta/dados/imoveis_geo_interno.RDS")
limite_cidade <- readRDS("coleta/dados/limite_cidade.RDS")

## prepara vínculos ####
vinculos <- vinculos |> subset(tipoInscricao ==2)
imoveis_c_geo <- 
  pessoas_fisica$pcode[match(vinculos$codPessoa, pessoas_fisica$codPessoa)] |>
  as.data.frame()
names(imoveis_c_geo) <- "pcode"
imoveis_c_geo$inscricao <- vinculos$inscricaoCadastral
imoveis_c_geo$relacao <- vinculos$tipoVinculoInscricao
imoveis_c_geo$responsavel <- vinculos$responsavel
imoveis_c_geo$fiscal <- vinculos$responsabilidadeFiscal

imoveis$endereco <- paste0(imoveis$tipoLogradouro, " ",
                           imoveis$nomeLogradouro,", n ",
                           imoveis$numero," ",
                           imoveis$complemento,", ",
                           imoveis$nomeBairro,", ",
                           CIDADE," - ",
                           UF,", ",
                           "BRASIL")

imoveis_c_geo <- imoveis_c_geo |>
  left_join(imoveis[,c("endereco",
                       "vlDebitoDA",
                       "vlIPTU",
                       "temDebitoInscricaoExercicio",
                       "vlVenalImovel",
                       "ocupacao",
                       "condicaoResponsavel",
                       "tipoIsencaoImunidadeIPTU",
                       "inscricaoCadastral")],
            by = c("inscricao" = "inscricaoCadastral"))

imoveis_c_geo$long <- NA
imoveis_c_geo$lat <- NA

# acrescenta as coordenadas dos imóveis, com prioridade para a fonte interna.
imoveis_c_geo[,c("long","lat")] <-
  coordinates(imoveis_geo_interno)[
    match(imoveis_c_geo$inscricao,
          imoveis_geo_interno$inscricao),c(1,2)]

imoveis_c_geo[imoveis_c_geo$long|>is.na(),c("long","lat")] <-
  imoveis_geo_osm[
    match(imoveis_c_geo$inscricao[imoveis_c_geo$long|>is.na()],
          imoveis_geo_osm$inscricaoCadastral),c("long","lat")]

# Separa os imóveis sem georreferenciamento
imoveis_s_geo <- 
  imoveis_c_geo[is.na(imoveis_c_geo$long),
                !names(imoveis_c_geo) %in% c("long","lat")]
imoveis_c_geo <- imoveis_c_geo[!is.na(imoveis_c_geo$long),]

# Converte para SpatialPointsDataFrame
coordinates(imoveis_c_geo) <- c("long","lat")
proj4string(imoveis_c_geo) <- "+proj=longlat +datum=WGS84 +no_defs"
na_cidade <-  imoveis_c_geo |> over(limite_cidade |> as("SpatialPolygons"))

# Separa os imóveis que não estão na cidade e junta com imoveis_s_geo
imoveis_s_geo <-  rbind(imoveis_s_geo,imoveis_c_geo@data[na_cidade |>is.na() |> which(),])
imoveis_c_geo <- imoveis_c_geo[(na_cidade==1)|>which(),]

# Elimina imóveis sem pessoas
imoveis_s_geo <- imoveis_s_geo |> subset(pcode |> is.na() |> not())
imoveis_c_geo <- imoveis_c_geo |> subset(pcode |> is.na() |> not())

# Grava
saveRDS(imoveis_c_geo, 
        file = "manipulacao/dados/imoveis_c_geo.RDS")
saveRDS(imoveis_s_geo, 
        file = "manipulacao/dados/imoveis_s_geo.RDS")
